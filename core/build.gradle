plugins {
    id 'java'
    id 'maven-publish'
    id 'signing'
    id 'org.jreleaser' version '1.17.0'
}

apply plugin: 'com.google.protobuf'
apply plugin: 'eclipse'
apply plugin: 'jacoco'
// apply plugin:  'com.github.spotbugs'

version = '21.1.12-SNAPSHOT'
archivesBaseName = 'dashj-core'
eclipse.project.name = 'dashj-core'

dependencies {
    implementation 'org.bouncycastle:bcprov-jdk15to18:1.74'
    implementation 'com.google.guava:guava:30.0-jre'
    implementation 'com.google.protobuf:protobuf-javalite:3.17.3'
    implementation 'com.squareup.okhttp3:okhttp:3.12.8'
    implementation 'org.slf4j:slf4j-api:1.7.30'
    implementation 'net.jcip:jcip-annotations:1.0'
    compileOnly 'org.fusesource.leveldbjni:leveldbjni-all:1.8'
    testImplementation 'junit:junit:4.13.1'
    testImplementation 'org.easymock:easymock:3.2'
    testImplementation 'com.fasterxml.jackson.core:jackson-databind:2.9.10.7'
    testImplementation 'org.slf4j:slf4j-jdk14:1.7.30'
    testImplementation 'com.h2database:h2:1.3.167'
    testImplementation 'org.fusesource.leveldbjni:leveldbjni-all:1.8'
    testImplementation 'org.hamcrest:hamcrest-library:1.3'

    // Dash Specific
    implementation 'de.sfuhrm:saphir-hash-core:3.0.10'
    implementation 'org.dashj:dashj-bls:1.0.1'
    implementation 'com.lambdaworks:scrypt:1.4.0'
    implementation 'org.json:json:20231013'

}

sourceCompatibility = 1.8
compileJava.options.encoding = 'UTF-8'
compileTestJava.options.encoding = 'UTF-8'
javadoc.options.encoding = 'UTF-8'

protobuf {
    protoc {
        artifact = 'com.google.protobuf:protoc:3.17.3'
    }
    generateProtoTasks {
        all().each { task ->
            task.builtins {
                java {
                    option "lite"
                }
            }
        }
    }
}

test {
    exclude 'org/bitcoinj/core/PeerTest*'
    exclude 'org/bitcoinj/core/TransactionBroadcastTest*'
    exclude 'org/bitcoinj/net/NetworkAbstractionTests*'
    exclude 'org/bitcoinj/net/discovery/DnsDiscoveryTest*'
    exclude 'org/bitcoinj/protocols/channels/ChannelConnectionTest*'
    exclude 'org/bitcoinj/core/LevelDBFullPrunedBlockChainTest*'
    exclude 'org/bitcoinj/store/LevelDBBlockStoreTest*'
    testLogging {
        events "failed"
        exceptionFormat "full"
    }
    finalizedBy jacocoTestReport // report is always generated after tests run
    // uncomment this next line to show logs in test output during CI tests
    // testLogging.showStandardStreams = true
}

tasks.withType(Test) {
    systemProperty "java.library.path", "../contrib/dashj-bls/bls/target/cmake:../contrib/x11/build"
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    archiveClassifier.set("javadoc")
    from javadoc.destinationDir
}

task sourcesJar(type: Jar, dependsOn: classes) {
    archiveClassifier.set("sources")
    from sourceSets.main.allSource
}

artifacts {
    archives sourcesJar
    archives javadocJar
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifactId = 'dashj-core'
            from components.java
            artifact sourcesJar
            artifact javadocJar
            pom {
                name = 'DashJ'
                description = 'Dash Java Library'
                url = 'https://dashj.org'

                licenses {
                    license {
                        name = 'The Apache License, Version 2.0'
                        url = 'https://www.apache.org/licenses/LICENSE-2.0.txt'
                    }
                }
                developers {
                    developer {
                        id = 'hashengineering'
                        name = 'HashEngineering'
                        email = 'hashengineeringsolutions@gmail.com'
                    }
                }
                scm {
                    connection = 'scm:git:git://github.com/dashevo/dashj.git'
                    developerConnection = 'scm:git:ssh://github.com/dashevo/dashj.git'
                    url = 'https://github.com/dashevo/dashj.git'
                }
            }
        }
    }

    repositories {
        maven {
            url = layout.buildDirectory.dir('staging-deploy')
        }
    }
}

jreleaser {
    project {
        name = 'dashj-core'
        description = 'Dash Java Library'
        website = 'https://dashj.org'
        authors = ['HashEngineering']
        license = 'Apache-2.0'
        gitRootSearch = true
    }

    signing {
        active = 'ALWAYS'
        armored = true
    }

//    deploy {
//        maven {
//            targets {
//                mavenCentral {
//                    active = 'ALWAYS'
//                    //url = 'https://central.sonatype.com/api/v1/publisher'
//                    username = project.findProperty('ossrhUsernameDash')
//                    password = project.findProperty('ossrhPasswordDash')
//                    stagingRepository = 'target/staging-deploy'
//                }
//            }
//        }
//    }
    deploy {
        maven {
            mavenCentral {
                sonatype {
                    active = 'ALWAYS'
                    url = 'https://central.sonatype.com/api/v1/publisher'
                    stagingRepository("$buildDir/staging-deploy")
                }
            }
            nexus2 {
                app {
                    active = 'SNAPSHOT'
                    url = 'https://central.sonatype.com/repository/maven-snapshots/'
                    snapshotUrl = 'https://central.sonatype.com/repository/maven-snapshots/'
                    applyMavenCentralRules = true
                    snapshotSupported = true
                    closeRepository = true
                    releaseRepository = true
                    stagingRepository("$buildDir/staging-deploy")
                }
            }
        }
    }
}

signing {
    required { gradle.taskGraph.hasTask("publish") }
    sign publishing.publications.mavenJava
}

javadoc {
    if(JavaVersion.current().isJava9Compatible()) {
        options.addBooleanOption('html5', true)
    }
}

assemble.dependsOn(publishToMavenLocal)
assemble.dependsOn(sourcesJar)

jacocoTestReport {
    dependsOn test // tests are required to run before generating the report
    reports {
        xml.enabled true
        xml.destination file("${project.projectDir}/build/reports/jacoco/jacoco.xml")
    }
}

//tasks.spotbugsMain {
//    reports.create("html") {
//        required = true
//        outputLocation = file("$buildDir/reports/spotbugs.html")
//        setStylesheet("fancy-hist.xsl")
//    }
//    reports.create("xml") {
//        required = true
//        outputLocation = file("$buildDir/reports/spotbugs.xml")
//    }
//}